theory WebsocketConnection
/*
Hawk01:

time tamarin-prover-161 WebsocketConnection.spthy  --prove +RTS -N15 -RTS && date
==============================================================================
summary of summaries:

analyzed: WebsocketConnection.spthy

  correctness (exists-trace): verified (30 steps)
  correctness_without_WSS_WPS (exists-trace): verified (10 steps)
  injective_agreement_sessK (all-traces): verified (63 steps)
  sessK_isSecret (all-traces): verified (50 steps)
  sessK_has_PFS (all-traces): verified (50 steps)
  Two_CDs_Enrolled_With_Same_PC (exists-trace): verified (10 steps)
  CD_Enrolled_With_Two_PCs (exists-trace): verified (10 steps)

==============================================================================

real    0m5.290s
user    0m40.336s
sys     0m13.224s
Mon 28 Feb 14:59:43 GMT 2022


*/


begin

builtins: diffie-hellman, symmetric-encryption, signing

//hash function
functions: H/1

//equality restriction
restriction equality:
    "All x y #i . Eq(x,y) @ i ==> (x = y)"

// we only allow one asymmetric key pair per entity
restriction OneASKeyPerEntity:
    "All #i #j x. 
        OnlyOneASKey(x)@#i & OnlyOneASKey(x)@#j 
        ==> 
        (#i = #j)
    "
    
//only one Websocket server
restriction OneWebSocketServer:
    "All #i #j WSS. 
        Entity('WebSocketServer', WSS) @ #i & Entity('WebSocketServer', WSS) @ #j 
        ==> 
        (#i = #j)
    "

//only one Push server
restriction OneWebPushServer:
    "All #i #j WPS. 
        Entity('WebPushSever', WPS) @ #i & Entity('WebPushSever', WPS) @ #j 
        ==> 
        (#i = #j)
    "

//entities can only have one role
restriction UniqueEntities:
    "All #t01 #t02 type1 type2 entity . 
        Entity(type1, entity) @ t01 & Entity(type2, entity) @ t02 
        ==> 
        ((type1 = type2) & (#t01 = #t02)) //only really need the second equality but this is clearer.
    "

/////////////////////////////////////
// Public key infrastructure (PKI)
////////////////////////////////////

// Anyone can register at any time a public key together with its ID
// But: only once per Entity
rule Register_pk:
    [ 
        Fr(~skX) 
    ]
  
    --[ 
        OnlyOneASKey($X) 
    ]->
  
    [
        !Ltk($X, ~skX), 
        !Pk($X, pk(~skX)),
        Out(pk(~skX)) 
    ] 
//we use one  EC-DH and g is point generating the group of EC, ie EC=<g>
rule DiffieHellmanGenerator:
    let
        gen='g'
     in
    []
    
    --[
        DiffieHellmanG(gen)
    ]->
    
    [
        !DHgen(gen),
        Out(gen)
    ]


/////////////////////////////////////
// Attacker
//////////////

// Compromising an entity's long-term key
rule Reveal_sk:
    [
        !Ltk($X, skX)
    ] 
  
    --[
        //We identify the entity by its PK
        Reveal(pk(skX),'sk', skX) 
    ]-> 
  
    [
        Out(skX)
    ]

// Leaking an entity's exponent 
rule Reveal_exponent: 
    [ 
          !RevExp($X, exp1)
        , !Pk($X, PKx)
    ] 
    --[
        Reveal(PKx,'exponent',exp1)
    ]-> 
  
    [ 
        Out(exp1) 
    ]

//need a PC or host
rule create_PC:
    [ 
        !Ltk($PC, ~sk_pc)
    ]
    
    --[
        Entity('PC', $PC),
        CreatedPC($PC),
        OnlyOnce('create_PC')
        
      ]->
    [
        !StatePC_Init($PC, ~sk_pc) 
    ]

//need a companion device
rule create_CD:
    [ 
        !Ltk($CD, ~sk_cd),
        Fr(~IDcd) // the unique CD identifier
    ]
    --[
        Entity('Companion_Device', $CD),
        CreatedCD($CD),
        OnlyOnce('create_CD')
    ]->
    [
          !StateCD_Init($CD, ~IDcd, ~sk_cd)
        , WPSRegIDcd($CD, ~IDcd) //register the device with the Web Push Server
    ]

//need a WebSocket Server - there will only be one
rule create_WSS:
    []
    
    --[
        Entity('WebSocketServer', $WSS),
        CreatedWSS($WSS),
        OnlyOnce('create_WSS')
        
    ]->
    
    []
    
//need a Web Push Server - there will only be one
rule create_WPS:
    []
    
    --[
        Entity('WebPushSever', $WPS),
        CreatedWPS($WPS),
        OnlyOnce('create_WPS')
        
    ]->
    
    [
        !WPSCreated($WPS)
    ]
    

//the following rule will take care of enrolment of a companion device to a PC
//Its output are last states from the enrolment run for the PC and CD respectively

rule enrol_CDPC:
    [
          !StatePC_Init($PC, ~sk_pc)
        , !Pk($PC, PKpc)
        , !StateCD_Init($CD, ~IDcd, ~sk_cd)
        , !Pk($CD, PKcd)
    ]
    
    --[
          EnrolledPCCD($PC, $CD, PKpc, PKcd, ~IDcd)
        , OnlyOnce('enrolment_CDPC')
    ]->
    
    [
          !StatePC_Enrolled($PC, ~sk_pc, PKpc, PKcd, ~IDcd)
        , !StateCD_Enrolled($CD, ~IDcd, ~sk_cd, PKcd, PKpc)
    ]

//Note that we do not care whether the
//the WPS routes the traffice correctly
//as it is completely untrusted
rule register_CD_with_WPS:
    [
          !WPSCreated($WPS)
        , WPSRegIDcd($CD, IDcd)
    ]
    
    --[
          RegisterCDwithWPS($WPS, $CD, IDcd)
        , OnlyOnce('register_CD_with_WPS')
    ]->
    
    [
        !WPSRouting($WPS, $CD, IDcd) // this will allow the WPS to map the IDcd to the $CD
    ]
    

//MSG1: PC initiates a connection to the WebSocket Server


rule PC_init:
    [
          Fr(~x) // the power to calculate g^x
        , !StatePC_Enrolled($PC, ~sk_pc, PKpc, PKcd, IDcd)
    ]
    
    --[
        SendInit($PC, $WSS),
        OnlyOnce('PC_init')
    ]->
    
    [
        Out(<$PC, $WSS, 'INIT'>) //unsecure channel between PC and WSS - in reality it will be TLS secured but WSS is untrusted
        , StatePC_02($PC, ~sk_pc, PKpc, PKcd, IDcd, ~x)
        , !RevExp($PC, ~x) // the PC can leak its exponent
    ]

//MSG2: Web socket server generates an ephemeral AddressID for the entity X
rule WSS_responds_to_init_from_X:
    [
        In(<$X, $WSS, 'INIT'>)
        , Fr(~ADRent)
    ]
    
    --[
        CreateSendADRent($WSS, $X,~ADRent) // no OnlyOnce here as this rule gets executed multiple times
    ]->
    
    [
        Out(<$PC, $WSS, ~ADRent>)
        , StateWSS_01($WSS, $X, ~ADRent) 
    ]

//MSG3: The PC now sends its contribution to the session key + some other info
// to the push server to forward to the 
// companion device

rule PC_sends_GX_to_WPS:
    let 
        gx=g^~x
        msg=<IDcd, ADRpc, H(PKpc), gx>
        signature=sign(<IDcd, ADRpc, gx>, ~sk_pc)
    in
    [
          In(<$PC, $WSS, ADRpc>)
        , StatePC_02($PC, ~sk_pc, PKpc, PKcd, IDcd, ~x)
        , !DHgen(g)
    ]
    
    --[
          PCSendsGXToWPS($PC, $WPS, IDcd, ADRpc, gx)
        , OnlyOnce('PC_sends_GX_to_WPS')
    ]->
    
    [
         StatePC_03($PC, ~sk_pc, PKpc, PKcd, IDcd, gx, ~x)
       , Out(<$PC, $WPS,msg, signature>)  
    ]

//MSG4: WebPushSever forwards to the corresponding companion device

rule WPS_forwards_PCmsg_to_CD:
    let 
        msg_in=<IDcd, ADRpc, HPKpc, gx> // need IDcd to pattern match for the routing
    in
    [
          In(<$PC, $WPS,msg_in, signature>)
        , !WPSRouting($WPS, $CD, IDcd)
    ]
    --[
          WPSForwardsToCD($WPS, $PC, $CD, IDcd, ADRpc, gx)
        , OnlyOnce('WPS_forwards_PCmsg_to_CD')
    ]->
    
    [
        Out(<$WPS, $CD, ADRpc, HPKpc, gx, signature>)
    ]
        

//MSG5: The Companion Device receives the PC message and sends an INIT to the WebSocketServer
//to be able to respond

rule CD_received_PCmsg:
    let
        msg_to_verify=<~IDcd, ADRpc, gx> 
        sessK=gx^~y //matches k in the diagram
    in
    [
          Fr(~y) //the exponent that the CD uses
          //HPKpc is used to look up the corresponding PKpc in the implementation
          //We use Tamarin's pattern matching - 
          //Note that the signature check effectively enforces the same behaviour
          //However, in any implementation this would require checking all known PKpcs on the
          //companion device using the hash of the PKpc simplifies this look-up.
        , In(<$WPS, $CD, ADRpc, H(PKpc), gx, signature>) 
        , !StateCD_Enrolled($CD, ~IDcd, ~sk_cd, PKcd, PKpc)
    ]
    --[
        Eq(verify(signature,msg_to_verify, PKpc), true), //ensure the signature is valid
        CDReceivedPCmsg($CD, ~IDcd, ADRpc, gx, sessK),
        OnlyOnce('CD_receivedPCmsg')
    ]->
    
    [
        Out(<$CD, $WSS, 'INIT'>)
        , StateCD_02($CD, ~IDcd, ~sk_cd, PKcd, PKpc, ~y, gx, sessK, ADRpc)
        , !RevExp($CD, ~y) // the CD can leak its exponent
    ]
        
// MSG 6: The WebSocketServer responds with an address 
// This is the same message as message MSG2 and is handled 
// by the rule  WSS_responds_to_init_from_X

// MSG 7: The companion device receives its ADRcd and sends its session key contribution 
// to the WSS to forward to the PC

rule CD_Sends_GY:
    let
        gy=g^~y //the session key contribution from the companion device
        msg1=<gx, gy, ADRcd>
        signmsg1=sign(msg1,~sk_cd)   
        msg_enc=senc(<ADRcd, H(PKcd), signmsg1>,sessK)
    in
    [
          In(<$CD, $WSS, ADRcd>) // the response from the WSS (see MSG 2)
        , StateCD_02($CD, ~IDcd, ~sk_cd, PKcd, PKpc, ~y, gx, sessK, ADRpc)
        , !DHgen(g)
    ]
    --[
        CDSendsGY($CD, ADRcd, ADRpc, gy, gx, sessK),
        OnlyOnce('CD_Sends_GY')
    ]->
    
    [
        Out(<$CD, $WSS, ADRpc, gy, msg_enc>),
        StateCD_03($CD, ~IDcd, ~sk_cd, PKcd, PKpc, gx, gy, ADRpc, sessK)
    ]

//MSG 8: The WebSocketServer receives the message and simply passes it on to the PC which corresponds
// to ADRpc

rule WSS_forwards_CDmsg_to_PC:
    [
          In(<$CD, $WSS, ADRpc, gy, msg_enc>)
        , StateWSS_01($WSS, $PC, ADRpc) 
    ]
    
    --[
        WSSForwardsToPC($WSS, $CD, $PC, ADRpc, gy),
        OnlyOnce('WSS_forwards_CDmsg_to_PC')
    ]->
    
    [
       Out(<$WSS, $PC, gy, msg_enc>)
    ]
        
//MSG 9: The PC receives the message and verifies the signature and responds to confirm the 
// correct receipt of the public key by signing the sessK components.
//This completes the agreement process for the PC

rule PC_receives_CDmsg_agrees_SessionKey:
    let 
        sessK=gy^~x
        //use pattern matching to decode...
        msg_enc=senc(<ADRcd, H(PKcd), signMsg1>, sessK)        
        verify_msg=<gx, gy, ADRcd>
        msgout_enc=senc(sign(<gx, gy>,~sk_pc), sessK)
    in
    [
        In(<$WSS, $PC, gy, msg_enc>),
        In(ADRcd), //partial deconstructions
        StatePC_03($PC, ~sk_pc, PKpc, PKcd, IDcd, gx, ~x)
    ]
    
    --[
        Eq(verify(signMsg1, verify_msg, PKcd), true),
        PCSessionKeyEstablished($PC, PKpc, PKcd, IDcd, sessK),
        OnlyOnce('PC_receives_CDmsg_completes_enrolement'),
        Running($PC, PKpc, PKcd, IDcd, sessK),
        Secret(PKpc, PKcd, sessK),
        Honest(PKcd),
        Honest(PKpc),
        Honest($PC)
    ]->
    
    [
          Out(<$PC, $WSS, ADRcd, msgout_enc>)
       //End of key establishment for the PC -the following state will be used in subsequent parts of the protocol
       //It's a non-persistent fact so that the session key can only be used once!
        , StatePC_SessionKeyEst($PC, ~sk_pc, PKpc, PKcd, IDcd, ADRcd, sessK)
    ]
    
//MSG 10: WebSocketServer receives PC message and forwards it to the companion device

rule WSS_forward_PCmsg_to_CD:
    [
        In(<$PC, $WSS, ADRcd, msg_enc>),
        StateWSS_01($WSS, $CD, ADRcd)
    ]
    
    --[
        WSSForwardsToCD($WSS, $PC, $CD, ADRcd, msg_enc),
        OnlyOnce('WSS_forward_PCmsg_to_CD')
    ]->
    
    [
        Out(<$WSS, $CD, msg_enc>)
    ]

// Key Establishment finished: Companion_Device obtains message and verifies it.

rule CD_receives_PCmsg_verifies_sig:
    let
        msg_enc=senc(signMsg, sessK)
        verify_msg=<gx,gy>
    in
    [
        In(<$WSS, $CD, msg_enc>),
        StateCD_03($CD, ~IDcd, ~sk_cd, PKcd, PKpc, gx, gy, ADRpc, sessK)
    ]
    
    --[
        Eq(verify(signMsg,verify_msg,PKpc),true),
        CDSessionKeyConfirmed($CD, PKpc, PKcd, ~IDcd, sessK),
        Commit($CD, PKpc, PKcd, ~IDcd, sessK),
        Secret(PKcd, PKpc, sessK),
        Honest(PKcd),
        Honest(PKpc),
        Honest($CD),
        Role('CD'), 
        OnlyOnce('CD_receives_PCmsg_verifies_sig')
    ]->
    
    [
    //end of websocket connection - session key established
    StateCD_SessionKeyEst($CD, ~IDcd, ~sk_cd, PKcd, PKpc, ADRpc, sessK)
    ]

 
//Verification starts here
//Note this shows the websocket server rules even though they are not strictly needed.
lemma correctness: exists-trace
    "Ex PC CD WSS WPS PKpc PKcd IDcd ADRpc gx sessK ADRcd gy msg_enc
        #t01 #t02 #t03 #t04 #t05 #t06 #t07 #t08 #t09 
        #t10 #t11 #t12 #t13 #t14 #t15 #t16 #t17
        .
        CreatedPC(PC) @ t01 
        &
        CreatedCD(CD) @ t02
        &
        CreatedWSS(WSS) @ t03
        &
        CreatedWPS(WPS) @ t04
        &
        EnrolledPCCD(PC, CD, PKpc, PKcd, IDcd) @ t05
        &
        RegisterCDwithWPS(WPS, CD, IDcd) @ t06
        &
        SendInit(PC, WSS) @ t07
        &
        CreateSendADRent(WSS, PC,ADRpc) @ t08
        &
        PCSendsGXToWPS(PC, WPS, IDcd, ADRpc, gx) @ t09
        &
        WPSForwardsToCD(WPS, PC, CD, IDcd, ADRpc, gx) @ t10
        &
        CDReceivedPCmsg(CD, IDcd, ADRpc, gx, sessK) @ t11
       &
        CreateSendADRent(WSS, CD,ADRcd) @ t12
        &
        CDSendsGY(CD, ADRcd, ADRpc, gy, gx, sessK) @ t13
        &
        WSSForwardsToPC(WSS, CD, PC, ADRpc, gy) @ t14
        &
        PCSessionKeyEstablished(PC, PKpc, PKcd, IDcd, sessK) @ t15
        &
        WSSForwardsToCD(WSS, PC, CD, ADRcd, msg_enc) @ t16
        &
        CDSessionKeyConfirmed(CD, PKpc, PKcd, IDcd, sessK) @ t17 
        &
        #t01<#t02
        &
        #t02<#t03
        &
        #t03<#t04
        &
        #t04<#t05
        &
        #t05<#t06
        &
        #t06<#t07
        &
        #t07<#t08
        &
        #t08<#t09
        &
        #t09<#t10
        &
        #t10<#t11
        &
        #t11<#t12
        &
        #t12<#t13
        &
        #t13<#t14 
        &
        #t14<#t15
        &
        #t15<#t16
        &
        #t16<#t17 
        &
        //we only execute each rule once
        (All event #x #y . OnlyOnce(event) @ x & OnlyOnce(event) @ y ==> #x=#y)
        &
        //we didn't have a key reveal
        (not (Ex entity type key #k . Reveal(entity, type, key) @ k))
    "

//this lemma shows that the DY attacker can just intercepts any message and
//bypass the websocket and webpush servers 

lemma correctness_without_WSS_WPS: exists-trace
    "Ex PC CD PKpc PKcd IDcd sessK #t01 #t02
    .
    PCSessionKeyEstablished(PC, PKpc, PKcd, IDcd, sessK)  @ t01
    &
    CDSessionKeyConfirmed(CD, PKpc, PKcd, IDcd, sessK) @ t02
    &
    #t01<#t02
    &
    //we only execute each rule once
     (All event #x #y . OnlyOnce(event) @ x & OnlyOnce(event) @ y ==> #x=#y)
    &
    //we didn't have a key reveal
    (not (Ex entity type key #k . Reveal(entity, type, key) @ k))
    "
    
lemma injective_agreement_sessK:
    "All CD PKpc PKcd IDcd sessK #t02 
    .
        Commit(CD, PKpc, PKcd, IDcd, sessK) @ t02
        ==>
        (Ex PC #t01 .Running(PC, PKpc, PKcd, IDcd, sessK) @ t01 & #t01<#t02
        &
        not (Ex CD2 PKpc2 PKcd2 IDcd2 #t03. Commit(CD2, PKpc2, PKcd2, IDcd2, sessK) @t03
             & not (#t03 = #t02))
        )
        |
        (Ex C type key #r . Reveal(C, type, key) @ r & Honest(C) @ t02)
    "

lemma sessK_isSecret:
    "All PKent1 PKent2 sessK #t01
    .
        Secret(PKent1, PKent2, sessK) @ t01
        ==>
        (not (Ex #t02 . K(sessK) @ t02))
        |
        (Ex PK type key #r . Reveal(PK, type, key) @ r & Honest(PK) @ t01)
    "

//we also have Perfect Forward Secrecy provided the parties involved do not leak
//their exponents. If only their private long term keys are allowed to leak then 
//all session keys before the leak will remain secret
lemma sessK_has_PFS:
    "All PKcd PKpc sessK #t02
    .
        (
        //Whenever PC and CD have agreed a session key 
            Secret(PKcd, PKpc, sessK) @ t02
        &
        // and neither party revealed their exponents
        not (Ex PK  key #r . Reveal(PK, 'exponent', key) @ r & Honest(PK) @ t02)
        )
        ==>
        //then the attacker does not know the session key
        (not (Ex #t01 . K(sessK) @ t01 ))
        |
        //or one of the parties revealed their longterm secret key sk before
        (Ex PK key #r . Reveal(PK, 'sk', key) @ r & Honest(PK) @ t02 & #r<#t02)
    "


//some more sanity checks

//A PC can have more than one CD enrolled:
lemma Two_CDs_Enrolled_With_Same_PC:exists-trace
    "Ex PC PKpc CD1 PKcd1 IDcd1 CD2 PKcd2 IDcd2 #t01 #t02
    .
    EnrolledPCCD(PC, CD1, PKpc, PKcd1, IDcd1) @ t01
    &
    EnrolledPCCD(PC, CD2, PKpc, PKcd2, IDcd2) @ t02
    &
    not (CD1=CD2)
    "
//A CD can have be enrolled with more than one PC:
lemma CD_Enrolled_With_Two_PCs:exists-trace
    "Ex PC1 PKpc1 PC2 PKpc2 CD PKcd IDcd  #t01 #t02
    .
    EnrolledPCCD(PC1, CD, PKpc1, PKcd, IDcd) @ t01
    &
    EnrolledPCCD(PC2, CD, PKpc2, PKcd, IDcd) @ t02
    &
    not (PC1=PC2)
    "

end